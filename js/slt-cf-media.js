
/**
 * Media API Javascript
 *
 * @since	1.0
 */

jQuery( document ).ready( function( $ ) {

	// Prepare the variable that holds our custom media managers.
	var slt_cf_media_frames = [];
	// Store current post id
	var wp_media_post_id = wp.media.model.settings.post.id;

	// Bind to our click event in order to open up the new media experience.
	$( document.body ).on( 'click.sltcfOpenMediaManager', '.slt-cf-fs-button', function( e ) {
		// Prevent the default action from occuring.
		e.preventDefault();

		// Store the button and other fields
		var button = $( this );
		var file_id_field = button.siblings( '.slt-cf-fs-value' );
		var field_name = button.attr( 'id' ).split( '_' ).slice( 0, -1 ).join( '_' );

		// Get any parameters passed through
		var attach_to_post = true;
		var dialog_title = 'Select file';
		var restrict_to_type = '';
		if ( typeof slt_cf_media[ 'attach_to_post__' + field_name ] != 'undefined' ) {
			attach_to_post = ( slt_cf_media[ 'attach_to_post__' + field_name ] == 'yes' );
		}
		if ( typeof slt_cf_media[ 'dialog_title__' + field_name ] != 'undefined' ) {
			dialog_title = slt_cf_media[ 'dialog_title__' + field_name ];
		}
		if ( typeof slt_cf_media[ 'restrict_to_type__' + field_name ] != 'undefined' ) {
			restrict_to_type = slt_cf_media[ 'restrict_to_type__' + field_name ];
		}

		// If the frame already exists, re-open it.
		if ( slt_cf_media_frames[ field_name ] ) {
			// Make sure the post attachment parameter is set correctly
			if ( ! attach_to_post ) {
				slt_cf_media_frames[ field_name ].uploader.uploader.param( 'post_id', 0 );
			} else {
				slt_cf_media_frames[ field_name ].uploader.uploader.param( 'post_id', wp_media_post_id );
			}
			// Open frame
			slt_cf_media_frames[ field_name ].open();
			return;
		} else {
			// Make sure the post attachment parameter is set correctly
			if ( ! attach_to_post ) {
				wp.media.model.settings.post.id = 0;
			} else {
				wp.media.model.settings.post.id = wp_media_post_id;
			}
		}

		/**
		 * The media frame doesn't exist let, so let's create it with some options.
		 *
		 * This options list is not exhaustive, so I encourage you to view the
		 * wp-includes/js/media-views.js file to see some of the other default
		 * options that can be utilized when creating your own custom media workflow.
		 */
		slt_cf_media_frames[ field_name ] = wp.media.frames.slt_cf_media_frame = wp.media({
			/**
			 * We can pass in a custom class name to our frame, so we do
			 * it here to provide some extra context for styling our
			 * media workflow. This helps us to prevent overwriting styles
			 * for other media workflows.
			 */
			className: 'media-frame slt-cf-media-frame',

			/**
			 * When creating a new media workflow, we are given two types
			 * of frame workflows to chose from: 'select' or 'post'.
			 *
			 * The 'select' workflow is the default workflow, mainly beneficial
			 * for uses outside of a post or post type experience where a post ID
			 * is crucial.
			 *
			 * The 'post' workflow is tailored to screens where utilizing the
			 * current post ID is critical.
			 *
			 * Since we only want to upload an image, let's go with the 'select'
			 * frame option.
			 */
			frame: 'select',

			/**
			 * We can determine whether or not we want to allow users to be able
			 * to upload multiple files at one time by setting this parameter to
			 * true or false. It defaults to true, but we only want the user to
			 * upload one file, so let's set it to false.
			 */
			multiple: false,

			/**
			 * We can set a custom title for our media workflow. I've localized
			 * the script with the object 'slt_cf_media' that holds our
			 * localized stuff and such. Let's populate the title with our custom
			 * text.
			 */
			title: dialog_title,

			/**
			 * We can force what type of media to show when the user views his/her
			 * library. Since we are uploading an image, let's limit the view to
			 * images only.
			 */
			library: {
				type: restrict_to_type
			}

			/**
			 * Let's customize the button text. It defaults to 'Select', but we
			 * can customize it here to give us better context.
			 *
			 * We can also determine whether or not the modal requires a selection
			 * before the button is enabled. It requires a selection by default,
			 * and since this is the experience desired, let's keep it that way.
			 *
			 * By default, the toolbar generated by this frame fires a generic
			 * 'select' event when the button is clicked. We could declare our
			 * own events here, but the default event will work just fine.
			button: {
				text:  slt_cf_media.button_text
			}
			 */

		});

		/**
		 * ========================================================================
		 * EVENT BINDING
		 *
		 * This section before opening the modal window should be used to bind to
		 * any events where we want to customize the view. This includes binding
		 * to any custom events that may have been generated by us creating
		 * custom controller states and views.
		 *
		 * The events used below are not exhaustive, so I encourage you to again
		 * study the wp-includes/js/media-views.js file for a better feel of all
		 * the potential events you can attach to.
		 * ========================================================================
		 */

		/**
		 * We are now attaching to the default 'select' event and grabbing our
		 * selection data. Since the button requires a selection, we know that a
		 * selection will be available when the event is fired.
		 *
		 * All we are doing is grabbing the current state of the frame (which will
		 * be 'library' since that's the only area where we can make a selection),
		 * getting the selection, calling the 'first' method to pluck the first
		 * object from the string and then forcing a faux JSON representation of
		 * the model.
		 *
		 * When all is said and done, we are given absolutely everything we need to
		 * insert the data into our custom input field. Specifically, our
		 * media_attachment object will hold a key titled 'url' that we want to use.
		 */
		slt_cf_media_frames[ field_name ].on( 'select', function() {
			var preview_div, preview_size;

			// Grab our attachment selection and construct a JSON representation of the model.
			var media_attachment = slt_cf_media_frames[ field_name ].state().get( 'selection' ).first().toJSON();

			// Send the attachment ID to our custom input field via jQuery.
			file_id_field.val( media_attachment.id );

			// Deal with the preview
			preview_div = $( '#' + field_name + '_preview' );
			preview_size = $( '#' + field_name + '_preview-size' ).val();
			// Load preview image
			preview_div.html( '' ).load( slt_cf_media.ajaxurl, {
				id: 	media_attachment.id,
				size:	preview_size,
				action:	'slt_cf_fs_get_file'
			});

		});

		// Now that everything has been set, let's open up the frame.
		slt_cf_media_frames[ field_name ].open();

	});
});
